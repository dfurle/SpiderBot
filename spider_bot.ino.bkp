#include <Servo.h>
#include <Adafruit_PWMServoDriver.h>

//#define MAX 164
//#define MIN 82

#define MAX 460
#define MIN 93

const int FR = 3;
const int FL = 2;
const int RR = 1;
const int RL = 0;

const int COXA = 0;
const int FEMUR = 1;
const int TIBIA = 2;

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x40);

class BindStrToInt{
public:
  String input[16];
  int output[16];
  int msize;
  BindStrToInt(){
    msize = 0;
  }
  void add(String i, int o){
    if(msize < 16){
      input[msize] = i;
      output[msize] = o;
      msize++;
    } else {
      Serial.println("ERROR");
    }
  }
  int get(String c){
    for(int i = 0; i < msize; i++){
      if(input[i].equals(c))
        return output[i];
    }
    return -1;
  }
  void printAll(){
    for(int i = 0; i < msize; i++){
      Serial.print(input[i]);
      Serial.print(" - ");
      Serial.println(output[i]);
    }
  }
};

/*
 * --------------
 * ID: 0+0 | 0-120
 * ID: 1+0 |25-140
 * ID: 2+0 | 0-180
 * --------------
 * ID: 0+4| 0-120
 * ID: 1+4|25-140
 * ID: 2+4| 0-180
 * --------------
 * ID: 0+8 | 0-120
 * ID: 1+8 |25-140
 * ID: 2+8 | 0-180
 * --------------
 * ID: 0+12 |60-180
 * ID: 1+12 |40-180
 * ID: 2+12 | 0-180
 */

int LEG[4][3];
int LIMITS[4][3][2] = {
  // COXA    FEMUR    TIBIA
  {{55,170},{40,180},{0,175}},//RL  w
  {{ 0,140},{25,150},{0,175}},//RR c
  {{25,140},{25,140},{3,180}},//FL c
  {{60,180},{40,180},{3,180}} //FR
  };

/*
int LEG[4][3];
int LIMITS[4][3][2] = {
  {{70,180},{40,180},{3,180}},
  {{60,180},{40,180},{1,150}},
  {{ 0,140},{25,140},{0,180}},
  {{ 0,140},{ 25,150},{0,175}}
  };
*/


//void setLeg(int index, int angle0, int angle1, int angle2){
//  angle0 = min(max(angle0,LIMITS[index][0][0]),LIMITS[index][0][1]);
//  angle1 = min(max(angle1,LIMITS[index][1][0]),LIMITS[index][1][1]);
//  angle2 = min(max(angle2,LIMITS[index][2][0]),LIMITS[index][2][1]);
//  LEG[index][0] = angle0;
//  LEG[index][1] = angle1;
//  LEG[index][2] = angle2;
//  Serial.println(angle0);
//  Serial.println(angle1);
//  Serial.println(angle2);
//  setPWM(0+index*4, angle0);
//  setPWM(1+index*4, angle1);
//  setPWM(2+index*4, angle2);
//}
//
//void moveLeg(int index, int angle0, int angle1, int angle2){
//  angle0 = min(max(LEG[index][0]+angle0,LIMITS[index][0][0]),LIMITS[index][0][1]);
//  angle1 = min(max(LEG[index][1]+angle1,LIMITS[index][1][0]),LIMITS[index][1][1]);
//  angle2 = min(max(LEG[index][2]+angle2,LIMITS[index][2][0]),LIMITS[index][2][1]);
//  Serial.println(angle0);
//  Serial.println(angle1);
//  Serial.println(angle2);
//  LEG[index][0] = angle0;
//  LEG[index][1] = angle1;
//  LEG[index][2] = angle2;
//  setPWM(0+index*4, angle0);
//  setPWM(1+index*4, angle1);
//  setPWM(2+index*4, angle2);
//}

void setAbsoluteLeg(int motor, int index, int angle){
  int _min = LIMITS[motor][index][0];
  int _max = LIMITS[motor][index][1];

  angle = min(max(angle,_min),_max);
  
  LEG[motor][index] = angle;
  setPWM(index+motor*4, angle);
}

void setLeg(int motor, int index, int angle){
  bool to_switch = false;
  if(motor == RR || motor == FL)
    to_switch = true;
  int _min = LIMITS[motor][index][0];
  int _max = LIMITS[motor][index][1];
  if(to_switch){
    angle = _max - angle;
  } else {
    angle = angle + _min;
  }

  angle = min(max(angle,_min),_max);
  
  LEG[motor][index] = angle;
  setPWM(index+motor*4, angle);
}

void moveLeg(int motor, int index, int angle){
  if(motor == RR || motor == FL)
    angle = -angle;
  angle = LEG[motor][index] + angle;
  int _min = LIMITS[motor][index][0];
  int _max = LIMITS[motor][index][1];
 
  angle = min(max(angle,_min),_max);
  
  LEG[motor][index] = angle;
  setPWM(index+motor*4, angle);
}

void mimic(int index, int angle){
  for(int motor = 0; motor < 4; motor++){
    setLeg(motor, index, angle);
  }
}

void moveMimic(int index, int angle){
  for(int motor = 0; motor < 4; motor++){
    moveLeg(motor, index, angle);
  }
}

void setPWM(int motor, int angle){
  if(motor >= 0 && motor < 3)
    motor++;
  pwm.setPWM(motor, 0, angle/180.*(MAX-MIN)+MIN);
}

void moveStepForward(){
  int wait = 100;
  int waitLong = 500;


  setAbsoluteLeg(RL,COXA,135);
  setAbsoluteLeg(RL,FEMUR,120);
  setAbsoluteLeg(RL,TIBIA,20);
  
  setAbsoluteLeg(RR,COXA,95);
  setAbsoluteLeg(RR,FEMUR,90);
  setAbsoluteLeg(RR,TIBIA,140);
  
  setAbsoluteLeg(FL,COXA,45);
  setAbsoluteLeg(FL,FEMUR,80);
  setAbsoluteLeg(FL,TIBIA,140);
  
  setAbsoluteLeg(FR,COXA,105);
  setAbsoluteLeg(FR,FEMUR,120);
  setAbsoluteLeg(FR,TIBIA,30);
  printLegs();
  /*----| RL| RR| FL| FR|
    COXA|135| 95| 45|105|
    FEMU|120| 90| 80|120|
    TIBI| 30|140|140| 30|
   */
  delay(waitLong);

  
  setAbsoluteLeg(FR,FEMUR,40);
  delay(wait);
  setAbsoluteLeg(FR,COXA,160);
  delay(wait);
  setAbsoluteLeg(FR,FEMUR,120);
  printLegs();
  /*----| RL| RR| FL| FR|
    COXA|135| 95| 45|160|
    FEMU|120| 90| 80|120|
    TIBI| 30|140|140| 30|
   */
  delay(waitLong);


  setAbsoluteLeg(RL,COXA,170);
  setAbsoluteLeg(RR,COXA,60);
  setAbsoluteLeg(FL,COXA,90);
  setAbsoluteLeg(FR,COXA,120);
   /*----| RL| RR| FL| FR|
    COXA|170| 60| 90|130|
    FEMU|100| 90| 80|120|
    TIBI| 30|140|140| 30|
    */
  delay(waitLong);

  
  setAbsoluteLeg(RL,FEMUR,40);
  delay(wait);
  setAbsoluteLeg(RL,COXA,90);
  delay(wait);
  setAbsoluteLeg(RL,FEMUR,120);
  printLegs();
  delay(waitLong);

  
  setAbsoluteLeg(FL,FEMUR,140);
  delay(wait);
  setAbsoluteLeg(FL,COXA,45);
  delay(wait);
  setAbsoluteLeg(FL,FEMUR,80);
  printLegs();
  delay(waitLong);

  
  setAbsoluteLeg(RL,COXA,130);
  setAbsoluteLeg(RR,COXA,30);
  setAbsoluteLeg(FL,COXA,60);
  setAbsoluteLeg(FR,COXA,90);
  delay(waitLong);

  
  setAbsoluteLeg(RR,FEMUR,140);
  delay(wait);
  setAbsoluteLeg(RR,COXA,90);
  delay(wait);
  setAbsoluteLeg(RR,FEMUR,80);
  printLegs();
  delay(waitLong);


}

void rotateLeft(){
  setLeg(RR, 1, -90);
  delay(100);
  setLeg(RR, 0, -60);
  delay(100);
  setLeg(RR, 1, 0);
  delay(500);
  
  setLeg(FL, 1, -90);
  delay(100);
  setLeg(FL, 0, -60);
  delay(100);
  setLeg(FL, 1, 0);
  delay(500);
  
  setLeg(FR, 1, -90);
  delay(100);
  setLeg(FR, 0, 60);
  delay(100);
  setLeg(FR, 1, 0);
  delay(500);
  
  setLeg(RL, 1, -90);
  delay(100);
  setLeg(RL, 0, 60);
  delay(100);
  setLeg(RL, 1, 0);
  delay(500);
  
  mimic(0, 0);
}

void printSpaces(int value, int spaces){

  if(value >= 100){
    Serial.print(value);
  }
  else if(value >= 10){
    Serial.print(" ");
    Serial.print(value);
  }
  else if(value >= 0){
    Serial.print("  ");
    Serial.print(value);
  }


}

void printLegs(){
  Serial.println("----| RL| RR| FL| FR|");
  Serial.print("COXA|");
  for(int l = 0; l < 4; l++){
    printSpaces(LEG[l][COXA],3);
    Serial.print("|");
  }
  Serial.println("");

  Serial.print("FEMU|");
  for(int l = 0; l < 4; l++){
    printSpaces(LEG[l][FEMUR],3);
    Serial.print("|");
  }
  Serial.println("");

  Serial.print("TIBI|");
  for(int l = 0; l < 4; l++){
    printSpaces(LEG[l][TIBIA],3);
    Serial.print("|");
  }
  Serial.println("");
  

}

BindStrToInt bind;
void setup() {
  bind.add("C",COXA);
  bind.add("F",FEMUR);
  bind.add("T",TIBIA);
  bind.add("RL",RL);
  bind.add("RR",RR);
  bind.add("FL",FL);
  bind.add("FR",FR);

  Serial.begin(9600);

  
  bind.printAll();

//  for(int motor = 0; motor < 4; motor++){
//    for(int chunk = 0; chunk < 3; chunk++){
//      Serial.print("M:");
//      Serial.print(motor);
//      Serial.print(" C:");
//      Serial.print(chunk);
//      Serial.print(" MIN:");
//      Serial.print(LIMITS[motor][chunk][0]);
//      Serial.print(" MAX:");
//      Serial.println(LIMITS[motor][chunk][1]);
//    }  
//  }

  pwm.begin();
  pwm.setOscillatorFrequency(27000000);
  pwm.setPWMFreq(50);

  
  pwm.setPWM(0, 0, 45/180.*(MAX-MIN)+MIN);
  delay(1000);
  pwm.setPWM(0, 0, 90/180.*(MAX-MIN)+MIN);
  delay(1000);


  pwm.setPWM(1, 0, 45/180.*(MAX-MIN)+MIN);
  delay(1000);
  pwm.setPWM(2, 0, 90/180.*(MAX-MIN)+MIN);
  delay(1000);



  // int wait = 100;
  // int waitLong = 1000;

  // mimic(COXA,90);
  // mimic(FEMUR,0);
  // mimic(TIBIA,0);
  // printLegs();
  // delay(waitLong);

  // mimic(COXA,45);
  // printLegs();
  // delay(waitLong);

  // moveStepForward();

}




void loop(){


//  char buf[64];
//  int index = 0;
//  memset(buf,0,64);
//  while(true){
//    if(Serial.available() > 0){
//      char rx = Serial.read();
//      if(rx == '\n')
//        break;
//      buf[index] = rx;
//      index++;
//    } else {
//      delay(100);
//    }
//  }
//  if(buf[0] != 0){
//    String s(buf);
//    int part = bind.get(String(s[0]));
//    int leg = bind.get(String(s.substring(2,4)));
//    int degree = s.substring(4).toInt();
//    if(part < 0 || part > 3)
//      return;
//    if(leg < 0 || leg > 4)
//      return;
//    setAbsoluteLeg(leg,part,degree);
//    printLegs();
//  }

  
  moveStepForward();
  



}
